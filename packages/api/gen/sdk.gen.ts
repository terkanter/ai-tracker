// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  PrometheusControllerIndexData,
  HealthControllerCheckData,
  HealthControllerCheckResponse,
  HealthControllerCheckError,
  UserControllerGetCurrentUserData,
  UserControllerGetCurrentUserResponse,
  UserControllerGetCurrentUserError,
  UserControllerUpdateUserProfileData,
  UserControllerUpdateUserProfileResponse,
  UserControllerUpdateUserProfileError,
  UserControllerFindAllUsersData,
  UserControllerFindAllUsersResponse,
  UserControllerFindAllUsersError,
  UserControllerDeleteUserData,
  UserControllerDeleteUserError,
  UserControllerFindUserData,
  UserControllerFindUserResponse,
  UserControllerFindUserError,
  ComicControllerFindAllComicsData,
  ComicControllerFindAllComicsResponse,
  ComicControllerFindAllComicsError,
  ComicControllerCreateComicData,
  ComicControllerCreateComicResponse,
  ComicControllerCreateComicError,
  ComicControllerFindComicBySlugData,
  ComicControllerFindComicBySlugResponse,
  ComicControllerFindComicBySlugError,
  ComicControllerDeleteComicData,
  ComicControllerDeleteComicError,
  ComicControllerUpdateComicData,
  ComicControllerUpdateComicResponse,
  ComicControllerUpdateComicError,
  ComicControllerGetAllGenresData,
  ComicControllerGetAllGenresResponse,
  ComicControllerGetAllGenresError,
  ComicControllerCreateGenreData,
  ComicControllerCreateGenreResponse,
  ComicControllerCreateGenreError,
  ComicControllerDeleteGenreData,
  ComicControllerDeleteGenreError,
  ComicControllerUpdateGenreData,
  ComicControllerUpdateGenreResponse,
  ComicControllerUpdateGenreError,
  ComicControllerGetAllTagsData,
  ComicControllerGetAllTagsResponse,
  ComicControllerGetAllTagsError,
  ComicControllerCreateTagData,
  ComicControllerCreateTagResponse,
  ComicControllerCreateTagError,
  ComicControllerDeleteTagData,
  ComicControllerDeleteTagError,
  ComicControllerUpdateTagData,
  ComicControllerUpdateTagResponse,
  ComicControllerUpdateTagError,
  ComicControllerGetAllRatingsData,
  ComicControllerGetAllRatingsResponse,
  ComicControllerGetAllRatingsError,
  ComicControllerCreateRatingData,
  ComicControllerCreateRatingResponse,
  ComicControllerCreateRatingError,
  ComicControllerDeleteRatingData,
  ComicControllerDeleteRatingError,
  ComicControllerUpdateRatingData,
  ComicControllerUpdateRatingResponse,
  ComicControllerUpdateRatingError,
  ComicControllerGetAllCountriesData,
  ComicControllerGetAllCountriesError,
  ComicControllerCreateCountryData,
  ComicControllerCreateCountryError,
  ComicControllerDeleteCountryData,
  ComicControllerDeleteCountryError,
  ComicControllerUpdateCountryData,
  ComicControllerUpdateCountryError,
  ComicControllerGetAllStatusesData,
  ComicControllerGetAllStatusesResponse,
  ComicControllerGetAllStatusesError,
  ComicControllerCreateStatusData,
  ComicControllerCreateStatusResponse,
  ComicControllerCreateStatusError,
  ComicControllerDeleteStatusData,
  ComicControllerDeleteStatusError,
  ComicControllerUpdateStatusData,
  ComicControllerUpdateStatusResponse,
  ComicControllerUpdateStatusError,
  ChapterControllerFindAllChaptersData,
  ChapterControllerFindAllChaptersResponse,
  ChapterControllerFindAllChaptersError,
  ChapterControllerCreateChapterData,
  ChapterControllerCreateChapterResponse,
  ChapterControllerCreateChapterError,
  ChapterControllerFindChapterBySlugData,
  ChapterControllerFindChapterBySlugResponse,
  ChapterControllerFindChapterBySlugError,
  ChapterControllerDeleteChapterData,
  ChapterControllerDeleteChapterError,
  ChapterControllerUpdateChapterData,
  ChapterControllerUpdateChapterResponse,
  ChapterControllerUpdateChapterError,
  UserTitleStateControllerFindAllUserTitleStatesData,
  UserTitleStateControllerFindAllUserTitleStatesError,
  UserTitleStateControllerCreateUserTitleStateData,
  UserTitleStateControllerCreateUserTitleStateResponse,
  UserTitleStateControllerCreateUserTitleStateError,
  UserTitleStateControllerGetUserBookmarksData,
  UserTitleStateControllerGetUserBookmarksError,
  UserTitleStateControllerDeleteUserTitleStateData,
  UserTitleStateControllerDeleteUserTitleStateError,
  UserTitleStateControllerFindUserTitleStateData,
  UserTitleStateControllerFindUserTitleStateResponse,
  UserTitleStateControllerFindUserTitleStateError,
  UserTitleStateControllerUpdateUserTitleStateData,
  UserTitleStateControllerUpdateUserTitleStateResponse,
  UserTitleStateControllerUpdateUserTitleStateError,
  UserTitleStateControllerGetUserTitleStateData,
  UserTitleStateControllerGetUserTitleStateResponse,
  UserTitleStateControllerGetUserTitleStateError,
  UserTitleStateControllerUpdateReadingProgressData,
  UserTitleStateControllerUpdateReadingProgressResponse,
  UserTitleStateControllerUpdateReadingProgressError,
} from "./types.gen.js";
import { client as _heyApiClient } from "./client.gen.js";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const prometheusControllerIndex = <ThrowOnError extends boolean = false>(
  options?: Options<PrometheusControllerIndexData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: "/api/metrics",
      ...options,
    },
  );
};

/**
 * Health check
 */
export const healthControllerCheck = <ThrowOnError extends boolean = false>(
  options?: Options<HealthControllerCheckData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthControllerCheckResponse,
    HealthControllerCheckError,
    ThrowOnError
  >({
    url: "/api/health",
    ...options,
  });
};

/**
 * Get current user
 */
export const userControllerGetCurrentUser = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserControllerGetCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UserControllerGetCurrentUserResponse,
    UserControllerGetCurrentUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/me",
    ...options,
  });
};

/**
 * Update user's profile
 */
export const userControllerUpdateUserProfile = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserControllerUpdateUserProfileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UserControllerUpdateUserProfileResponse,
    UserControllerUpdateUserProfileError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/me",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List users.
 */
export const userControllerFindAllUsers = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserControllerFindAllUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UserControllerFindAllUsersResponse,
    UserControllerFindAllUsersError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users",
    ...options,
  });
};

/**
 * Delete a user
 */
export const userControllerDeleteUser = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerDeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    UserControllerDeleteUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/{id}",
    ...options,
  });
};

/**
 * Find user by id
 */
export const userControllerFindUser = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerFindUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    UserControllerFindUserResponse,
    UserControllerFindUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/{id}",
    ...options,
  });
};

/**
 * List comics with offset pagination
 */
export const comicControllerFindAllComics = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ComicControllerFindAllComicsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ComicControllerFindAllComicsResponse,
    ComicControllerFindAllComicsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics",
    ...options,
  });
};

/**
 * Create a new comic
 */
export const comicControllerCreateComic = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerCreateComicData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ComicControllerCreateComicResponse,
    ComicControllerCreateComicError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Find comic by slug
 */
export const comicControllerFindComicBySlug = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerFindComicBySlugData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ComicControllerFindComicBySlugResponse,
    ComicControllerFindComicBySlugError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/{slug}",
    ...options,
  });
};

/**
 * Delete a comic
 */
export const comicControllerDeleteComic = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerDeleteComicData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    ComicControllerDeleteComicError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/{id}",
    ...options,
  });
};

/**
 * Update comic
 */
export const comicControllerUpdateComic = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerUpdateComicData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ComicControllerUpdateComicResponse,
    ComicControllerUpdateComicError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List all genres
 */
export const comicControllerGetAllGenres = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ComicControllerGetAllGenresData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ComicControllerGetAllGenresResponse,
    ComicControllerGetAllGenresError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/genres",
    ...options,
  });
};

/**
 * Create a new genre
 */
export const comicControllerCreateGenre = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerCreateGenreData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ComicControllerCreateGenreResponse,
    ComicControllerCreateGenreError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/genres",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete a genre
 */
export const comicControllerDeleteGenre = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerDeleteGenreData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    ComicControllerDeleteGenreError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/genres/{id}",
    ...options,
  });
};

/**
 * Update genre
 */
export const comicControllerUpdateGenre = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerUpdateGenreData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ComicControllerUpdateGenreResponse,
    ComicControllerUpdateGenreError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/genres/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List all tags
 */
export const comicControllerGetAllTags = <ThrowOnError extends boolean = false>(
  options?: Options<ComicControllerGetAllTagsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ComicControllerGetAllTagsResponse,
    ComicControllerGetAllTagsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/tags",
    ...options,
  });
};

/**
 * Create a new tag
 */
export const comicControllerCreateTag = <ThrowOnError extends boolean = false>(
  options: Options<ComicControllerCreateTagData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ComicControllerCreateTagResponse,
    ComicControllerCreateTagError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/tags",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete a tag
 */
export const comicControllerDeleteTag = <ThrowOnError extends boolean = false>(
  options: Options<ComicControllerDeleteTagData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    ComicControllerDeleteTagError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/tags/{id}",
    ...options,
  });
};

/**
 * Update tag
 */
export const comicControllerUpdateTag = <ThrowOnError extends boolean = false>(
  options: Options<ComicControllerUpdateTagData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ComicControllerUpdateTagResponse,
    ComicControllerUpdateTagError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/tags/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List all ratings
 */
export const comicControllerGetAllRatings = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ComicControllerGetAllRatingsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ComicControllerGetAllRatingsResponse,
    ComicControllerGetAllRatingsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/ratings",
    ...options,
  });
};

/**
 * Create a new rating
 */
export const comicControllerCreateRating = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerCreateRatingData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ComicControllerCreateRatingResponse,
    ComicControllerCreateRatingError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/ratings",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete a rating
 */
export const comicControllerDeleteRating = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerDeleteRatingData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    ComicControllerDeleteRatingError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/ratings/{id}",
    ...options,
  });
};

/**
 * Update rating
 */
export const comicControllerUpdateRating = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerUpdateRatingData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ComicControllerUpdateRatingResponse,
    ComicControllerUpdateRatingError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/ratings/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List all countries
 */
export const comicControllerGetAllCountries = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ComicControllerGetAllCountriesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    unknown,
    ComicControllerGetAllCountriesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/countries",
    ...options,
  });
};

/**
 * Create a new country
 */
export const comicControllerCreateCountry = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ComicControllerCreateCountryData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    ComicControllerCreateCountryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/countries",
    ...options,
  });
};

/**
 * Delete a country
 */
export const comicControllerDeleteCountry = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerDeleteCountryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    ComicControllerDeleteCountryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/countries/{id}",
    ...options,
  });
};

/**
 * Update country
 */
export const comicControllerUpdateCountry = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerUpdateCountryData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    unknown,
    ComicControllerUpdateCountryError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/countries/{id}",
    ...options,
  });
};

/**
 * List all statuses
 */
export const comicControllerGetAllStatuses = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ComicControllerGetAllStatusesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ComicControllerGetAllStatusesResponse,
    ComicControllerGetAllStatusesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/statuses",
    ...options,
  });
};

/**
 * Create a new status
 */
export const comicControllerCreateStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerCreateStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ComicControllerCreateStatusResponse,
    ComicControllerCreateStatusError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/statuses",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Delete a status
 */
export const comicControllerDeleteStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerDeleteStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    ComicControllerDeleteStatusError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/statuses/{id}",
    ...options,
  });
};

/**
 * Update status
 */
export const comicControllerUpdateStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ComicControllerUpdateStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ComicControllerUpdateStatusResponse,
    ComicControllerUpdateStatusError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/statuses/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List chapters with offset pagination
 */
export const chapterControllerFindAllChapters = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ChapterControllerFindAllChaptersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ChapterControllerFindAllChaptersResponse,
    ChapterControllerFindAllChaptersError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/chapters",
    ...options,
  });
};

/**
 * Create a new chapter
 */
export const chapterControllerCreateChapter = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ChapterControllerCreateChapterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ChapterControllerCreateChapterResponse,
    ChapterControllerCreateChapterError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/chapters",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Find chapter by slug
 */
export const chapterControllerFindChapterBySlug = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ChapterControllerFindChapterBySlugData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ChapterControllerFindChapterBySlugResponse,
    ChapterControllerFindChapterBySlugError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/chapters/{slug}",
    ...options,
  });
};

/**
 * Delete a chapter
 */
export const chapterControllerDeleteChapter = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ChapterControllerDeleteChapterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    ChapterControllerDeleteChapterError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/chapters/{id}",
    ...options,
  });
};

/**
 * Update chapter
 */
export const chapterControllerUpdateChapter = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ChapterControllerUpdateChapterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    ChapterControllerUpdateChapterResponse,
    ChapterControllerUpdateChapterError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/comics/chapters/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get current user title states
 */
export const userTitleStateControllerFindAllUserTitleStates = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    UserTitleStateControllerFindAllUserTitleStatesData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    unknown,
    UserTitleStateControllerFindAllUserTitleStatesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-title-states",
    ...options,
  });
};

/**
 * Create or update user title state
 */
export const userTitleStateControllerCreateUserTitleState = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UserTitleStateControllerCreateUserTitleStateData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    UserTitleStateControllerCreateUserTitleStateResponse,
    UserTitleStateControllerCreateUserTitleStateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-title-states",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get current user bookmarks
 */
export const userTitleStateControllerGetUserBookmarks = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserTitleStateControllerGetUserBookmarksData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    unknown,
    UserTitleStateControllerGetUserBookmarksError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-title-states/bookmarks",
    ...options,
  });
};

/**
 * Delete user title state
 */
export const userTitleStateControllerDeleteUserTitleState = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UserTitleStateControllerDeleteUserTitleStateData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    UserTitleStateControllerDeleteUserTitleStateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-title-states/{id}",
    ...options,
  });
};

/**
 * Find user title state by id
 */
export const userTitleStateControllerFindUserTitleState = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UserTitleStateControllerFindUserTitleStateData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    UserTitleStateControllerFindUserTitleStateResponse,
    UserTitleStateControllerFindUserTitleStateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-title-states/{id}",
    ...options,
  });
};

/**
 * Update user title state
 */
export const userTitleStateControllerUpdateUserTitleState = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UserTitleStateControllerUpdateUserTitleStateData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).patch<
    UserTitleStateControllerUpdateUserTitleStateResponse,
    UserTitleStateControllerUpdateUserTitleStateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-title-states/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get user state for specific comic
 */
export const userTitleStateControllerGetUserTitleState = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UserTitleStateControllerGetUserTitleStateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    UserTitleStateControllerGetUserTitleStateResponse,
    UserTitleStateControllerGetUserTitleStateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-title-states/comic/{comicId}",
    ...options,
  });
};

/**
 * Update reading progress for a comic
 */
export const userTitleStateControllerUpdateReadingProgress = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    UserTitleStateControllerUpdateReadingProgressData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).post<
    UserTitleStateControllerUpdateReadingProgressResponse,
    UserTitleStateControllerUpdateReadingProgressError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/user-title-states/reading-progress/{comicId}/{cursor}",
    ...options,
  });
};
