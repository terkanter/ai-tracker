// This file is auto-generated by @hey-api/openapi-ts

export type HealthCheckDto = {
  status: {
    [key: string]: unknown;
  };
  details: {
    [key: string]: unknown;
  };
};

export type ErrorDetailDto = {
  property?: string;
  code: string;
  message: string;
};

export type ErrorDto = {
  statusCode: number;
  error: string;
  message: string;
  errorCode?: string;
  details?: Array<ErrorDetailDto>;
};

export type UserDto = {
  id: string;
  roles: Array<"User" | "Admin">;
  username: string;
  email: string;
  firstName?: string;
  lastName?: string;
  image?: string;
  createdAt: string;
  updatedAt: string;
  bio?: string;
};

export type OffsetPaginationDto = {
  limit: number;
  currentPage: number;
  nextPage: number;
  previousPage: number;
  totalRecords: number;
  totalPages: number;
};

export type OffsetPaginatedDto = {
  data: Array<Array<unknown>>;
  pagination: OffsetPaginationDto;
};

export type UpdateUserProfileDto = {
  username?: string;
  firstName?: string | null;
  lastName?: string | null;
  image?: string | null;
};

export type TitleGenreDto = {
  id: string;
  name: string;
  slug: string;
};

export type TitleTagDto = {
  id: string;
  name: string;
  slug: string;
};

export type TitleRatingDto = {
  id: string;
  name: string;
  slug: string;
};

export type CountryDto = {
  id: string;
  countryName: string;
  slug: string;
  selfName: string;
};

export type TitleStatusDto = {
  id: string;
  name: string;
  slug: string;
};

export type ComicDto = {
  id: string;
  name: string;
  alternatives: {
    [key: string]: unknown;
  } | null;
  slug: string;
  genres: Array<TitleGenreDto>;
  tags: Array<TitleTagDto>;
  rating: TitleRatingDto | null;
  countryOfOrigin: CountryDto | null;
  publishedAt: string | null;
  description?: string;
  score: number;
  status: TitleStatusDto | null;
  createdAt: string;
  updatedAt: string;
};

export type CreateComicDto = {
  name: string;
  alternatives?: {
    [key: string]: unknown;
  };
  genreIds?: Array<string>;
  tagIds?: Array<string>;
  ratingId?: string;
  countryOfOriginId?: string;
  publishedAt?: string;
  description?: string;
  score?: number;
  statusId?: string;
};

export type UpdateComicDto = {
  name?: string;
  alternatives?: {
    [key: string]: unknown;
  };
  genreIds?: Array<string>;
  tagIds?: Array<string>;
  ratingId?: string;
  countryOfOriginId?: string;
  publishedAt?: string;
  description?: string;
  score?: number;
  statusId?: string;
};

export type MetadataDto = {
  id: string;
  name: string;
  slug: string;
};

export type CreateMetadataDto = {
  name: string;
};

export type UpdateMetadataDto = {
  name: string;
};

export type ChapterDto = {
  id: string;
  comicId: string;
  name: string;
  volume?: string;
  index: number;
  isDeleted: boolean;
  slug: string;
  uploadedByUserId: string;
  createdAt: string;
  updatedAt: string;
};

export type CreateChapterDto = {
  comicId: string;
  name: string;
  volume?: string;
  index: number;
  isDeleted?: boolean;
};

export type UpdateChapterDto = {
  name?: string;
  volume?: string;
  index?: number;
  isDeleted?: boolean;
};

export type UserTitleStateDto = {
  id: string;
  comicId: string;
  userId: string;
  bookmarked: boolean;
  lastReadCursor: number;
  createdAt: string;
  updatedAt: string;
};

export type CreateUserTitleStateDto = {
  comicId: string;
  bookmarked?: boolean;
  lastReadCursor?: number;
};

export type UpdateUserTitleStateDto = {
  bookmarked?: boolean;
  lastReadCursor?: number;
};

export type PrometheusControllerIndexData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/metrics";
};

export type PrometheusControllerIndexResponses = {
  200: unknown;
};

export type HealthControllerCheckData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/health";
};

export type HealthControllerCheckErrors = {
  404: ErrorDto;
  /**
   * The Health Check is not successful
   */
  503: {
    status?: string;
    info?: {
      [key: string]: {
        status: string;
        [key: string]: unknown | string;
      };
    } | null;
    error?: {
      [key: string]: {
        status: string;
        [key: string]: unknown | string;
      };
    } | null;
    details?: {
      [key: string]: {
        status: string;
        [key: string]: unknown | string;
      };
    };
  };
};

export type HealthControllerCheckError =
  HealthControllerCheckErrors[keyof HealthControllerCheckErrors];

export type HealthControllerCheckResponses = {
  200: HealthCheckDto;
};

export type HealthControllerCheckResponse =
  HealthControllerCheckResponses[keyof HealthControllerCheckResponses];

export type UserControllerGetCurrentUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/users/me";
};

export type UserControllerGetCurrentUserErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserControllerGetCurrentUserError =
  UserControllerGetCurrentUserErrors[keyof UserControllerGetCurrentUserErrors];

export type UserControllerGetCurrentUserResponses = {
  /**
   * OK
   */
  200: UserDto;
};

export type UserControllerGetCurrentUserResponse =
  UserControllerGetCurrentUserResponses[keyof UserControllerGetCurrentUserResponses];

export type UserControllerUpdateUserProfileData = {
  body: UpdateUserProfileDto;
  path?: never;
  query?: never;
  url: "/api/v1/users/me";
};

export type UserControllerUpdateUserProfileErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserControllerUpdateUserProfileError =
  UserControllerUpdateUserProfileErrors[keyof UserControllerUpdateUserProfileErrors];

export type UserControllerUpdateUserProfileResponses = {
  /**
   * OK
   */
  200: UserDto;
};

export type UserControllerUpdateUserProfileResponse =
  UserControllerUpdateUserProfileResponses[keyof UserControllerUpdateUserProfileResponses];

export type UserControllerFindAllUsersData = {
  body?: never;
  path?: never;
  query?: {
    limit?: number;
    page?: number;
    q?: string;
    order?: "asc" | "desc";
  };
  url: "/api/v1/users";
};

export type UserControllerFindAllUsersErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserControllerFindAllUsersError =
  UserControllerFindAllUsersErrors[keyof UserControllerFindAllUsersErrors];

export type UserControllerFindAllUsersResponses = {
  /**
   * OK
   */
  200: OffsetPaginatedDto & {
    data?: Array<UserDto>;
  };
};

export type UserControllerFindAllUsersResponse =
  UserControllerFindAllUsersResponses[keyof UserControllerFindAllUsersResponses];

export type UserControllerDeleteUserData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/users/{id}";
};

export type UserControllerDeleteUserErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserControllerDeleteUserError =
  UserControllerDeleteUserErrors[keyof UserControllerDeleteUserErrors];

export type UserControllerDeleteUserResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UserControllerFindUserData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/users/{id}";
};

export type UserControllerFindUserErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserControllerFindUserError =
  UserControllerFindUserErrors[keyof UserControllerFindUserErrors];

export type UserControllerFindUserResponses = {
  /**
   * OK
   */
  200: UserDto;
};

export type UserControllerFindUserResponse =
  UserControllerFindUserResponses[keyof UserControllerFindUserResponses];

export type ComicControllerFindAllComicsData = {
  body?: never;
  path?: never;
  query?: {
    limit?: number;
    page?: number;
    q?: string;
    order?: "asc" | "desc";
  };
  url: "/api/v1/comics";
};

export type ComicControllerFindAllComicsErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerFindAllComicsError =
  ComicControllerFindAllComicsErrors[keyof ComicControllerFindAllComicsErrors];

export type ComicControllerFindAllComicsResponses = {
  /**
   * OK
   */
  200: OffsetPaginatedDto & {
    data?: Array<ComicDto>;
  };
};

export type ComicControllerFindAllComicsResponse =
  ComicControllerFindAllComicsResponses[keyof ComicControllerFindAllComicsResponses];

export type ComicControllerCreateComicData = {
  body: CreateComicDto;
  path?: never;
  query?: never;
  url: "/api/v1/comics";
};

export type ComicControllerCreateComicErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerCreateComicError =
  ComicControllerCreateComicErrors[keyof ComicControllerCreateComicErrors];

export type ComicControllerCreateComicResponses = {
  /**
   * OK
   */
  200: ComicDto;
};

export type ComicControllerCreateComicResponse =
  ComicControllerCreateComicResponses[keyof ComicControllerCreateComicResponses];

export type ComicControllerFindComicBySlugData = {
  body?: never;
  path: {
    slug: string;
  };
  query?: never;
  url: "/api/v1/comics/{slug}";
};

export type ComicControllerFindComicBySlugErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerFindComicBySlugError =
  ComicControllerFindComicBySlugErrors[keyof ComicControllerFindComicBySlugErrors];

export type ComicControllerFindComicBySlugResponses = {
  /**
   * OK
   */
  200: ComicDto;
};

export type ComicControllerFindComicBySlugResponse =
  ComicControllerFindComicBySlugResponses[keyof ComicControllerFindComicBySlugResponses];

export type ComicControllerDeleteComicData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/{id}";
};

export type ComicControllerDeleteComicErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerDeleteComicError =
  ComicControllerDeleteComicErrors[keyof ComicControllerDeleteComicErrors];

export type ComicControllerDeleteComicResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ComicControllerUpdateComicData = {
  body: UpdateComicDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/{id}";
};

export type ComicControllerUpdateComicErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerUpdateComicError =
  ComicControllerUpdateComicErrors[keyof ComicControllerUpdateComicErrors];

export type ComicControllerUpdateComicResponses = {
  /**
   * OK
   */
  200: ComicDto;
};

export type ComicControllerUpdateComicResponse =
  ComicControllerUpdateComicResponses[keyof ComicControllerUpdateComicResponses];

export type ComicControllerGetAllGenresData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/comics/genres";
};

export type ComicControllerGetAllGenresErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerGetAllGenresError =
  ComicControllerGetAllGenresErrors[keyof ComicControllerGetAllGenresErrors];

export type ComicControllerGetAllGenresResponses = {
  /**
   * OK
   */
  200: MetadataDto;
};

export type ComicControllerGetAllGenresResponse =
  ComicControllerGetAllGenresResponses[keyof ComicControllerGetAllGenresResponses];

export type ComicControllerCreateGenreData = {
  body: CreateMetadataDto;
  path?: never;
  query?: never;
  url: "/api/v1/comics/genres";
};

export type ComicControllerCreateGenreErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerCreateGenreError =
  ComicControllerCreateGenreErrors[keyof ComicControllerCreateGenreErrors];

export type ComicControllerCreateGenreResponses = {
  /**
   * OK
   */
  200: MetadataDto;
};

export type ComicControllerCreateGenreResponse =
  ComicControllerCreateGenreResponses[keyof ComicControllerCreateGenreResponses];

export type ComicControllerDeleteGenreData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/genres/{id}";
};

export type ComicControllerDeleteGenreErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerDeleteGenreError =
  ComicControllerDeleteGenreErrors[keyof ComicControllerDeleteGenreErrors];

export type ComicControllerDeleteGenreResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ComicControllerUpdateGenreData = {
  body: UpdateMetadataDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/genres/{id}";
};

export type ComicControllerUpdateGenreErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerUpdateGenreError =
  ComicControllerUpdateGenreErrors[keyof ComicControllerUpdateGenreErrors];

export type ComicControllerUpdateGenreResponses = {
  /**
   * OK
   */
  200: MetadataDto;
};

export type ComicControllerUpdateGenreResponse =
  ComicControllerUpdateGenreResponses[keyof ComicControllerUpdateGenreResponses];

export type ComicControllerGetAllTagsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/comics/tags";
};

export type ComicControllerGetAllTagsErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerGetAllTagsError =
  ComicControllerGetAllTagsErrors[keyof ComicControllerGetAllTagsErrors];

export type ComicControllerGetAllTagsResponses = {
  /**
   * OK
   */
  200: MetadataDto;
};

export type ComicControllerGetAllTagsResponse =
  ComicControllerGetAllTagsResponses[keyof ComicControllerGetAllTagsResponses];

export type ComicControllerCreateTagData = {
  body: CreateMetadataDto;
  path?: never;
  query?: never;
  url: "/api/v1/comics/tags";
};

export type ComicControllerCreateTagErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerCreateTagError =
  ComicControllerCreateTagErrors[keyof ComicControllerCreateTagErrors];

export type ComicControllerCreateTagResponses = {
  /**
   * OK
   */
  200: MetadataDto;
};

export type ComicControllerCreateTagResponse =
  ComicControllerCreateTagResponses[keyof ComicControllerCreateTagResponses];

export type ComicControllerDeleteTagData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/tags/{id}";
};

export type ComicControllerDeleteTagErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerDeleteTagError =
  ComicControllerDeleteTagErrors[keyof ComicControllerDeleteTagErrors];

export type ComicControllerDeleteTagResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ComicControllerUpdateTagData = {
  body: UpdateMetadataDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/tags/{id}";
};

export type ComicControllerUpdateTagErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerUpdateTagError =
  ComicControllerUpdateTagErrors[keyof ComicControllerUpdateTagErrors];

export type ComicControllerUpdateTagResponses = {
  /**
   * OK
   */
  200: MetadataDto;
};

export type ComicControllerUpdateTagResponse =
  ComicControllerUpdateTagResponses[keyof ComicControllerUpdateTagResponses];

export type ComicControllerGetAllRatingsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/comics/ratings";
};

export type ComicControllerGetAllRatingsErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerGetAllRatingsError =
  ComicControllerGetAllRatingsErrors[keyof ComicControllerGetAllRatingsErrors];

export type ComicControllerGetAllRatingsResponses = {
  /**
   * OK
   */
  200: MetadataDto;
};

export type ComicControllerGetAllRatingsResponse =
  ComicControllerGetAllRatingsResponses[keyof ComicControllerGetAllRatingsResponses];

export type ComicControllerCreateRatingData = {
  body: CreateMetadataDto;
  path?: never;
  query?: never;
  url: "/api/v1/comics/ratings";
};

export type ComicControllerCreateRatingErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerCreateRatingError =
  ComicControllerCreateRatingErrors[keyof ComicControllerCreateRatingErrors];

export type ComicControllerCreateRatingResponses = {
  /**
   * OK
   */
  200: MetadataDto;
};

export type ComicControllerCreateRatingResponse =
  ComicControllerCreateRatingResponses[keyof ComicControllerCreateRatingResponses];

export type ComicControllerDeleteRatingData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/ratings/{id}";
};

export type ComicControllerDeleteRatingErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerDeleteRatingError =
  ComicControllerDeleteRatingErrors[keyof ComicControllerDeleteRatingErrors];

export type ComicControllerDeleteRatingResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ComicControllerUpdateRatingData = {
  body: UpdateMetadataDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/ratings/{id}";
};

export type ComicControllerUpdateRatingErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerUpdateRatingError =
  ComicControllerUpdateRatingErrors[keyof ComicControllerUpdateRatingErrors];

export type ComicControllerUpdateRatingResponses = {
  /**
   * OK
   */
  200: MetadataDto;
};

export type ComicControllerUpdateRatingResponse =
  ComicControllerUpdateRatingResponses[keyof ComicControllerUpdateRatingResponses];

export type ComicControllerGetAllCountriesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/comics/countries";
};

export type ComicControllerGetAllCountriesErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerGetAllCountriesError =
  ComicControllerGetAllCountriesErrors[keyof ComicControllerGetAllCountriesErrors];

export type ComicControllerGetAllCountriesResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ComicControllerCreateCountryData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/comics/countries";
};

export type ComicControllerCreateCountryErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerCreateCountryError =
  ComicControllerCreateCountryErrors[keyof ComicControllerCreateCountryErrors];

export type ComicControllerCreateCountryResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ComicControllerDeleteCountryData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/countries/{id}";
};

export type ComicControllerDeleteCountryErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerDeleteCountryError =
  ComicControllerDeleteCountryErrors[keyof ComicControllerDeleteCountryErrors];

export type ComicControllerDeleteCountryResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ComicControllerUpdateCountryData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/countries/{id}";
};

export type ComicControllerUpdateCountryErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerUpdateCountryError =
  ComicControllerUpdateCountryErrors[keyof ComicControllerUpdateCountryErrors];

export type ComicControllerUpdateCountryResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ComicControllerGetAllStatusesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/comics/statuses";
};

export type ComicControllerGetAllStatusesErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerGetAllStatusesError =
  ComicControllerGetAllStatusesErrors[keyof ComicControllerGetAllStatusesErrors];

export type ComicControllerGetAllStatusesResponses = {
  /**
   * OK
   */
  200: MetadataDto;
};

export type ComicControllerGetAllStatusesResponse =
  ComicControllerGetAllStatusesResponses[keyof ComicControllerGetAllStatusesResponses];

export type ComicControllerCreateStatusData = {
  body: CreateMetadataDto;
  path?: never;
  query?: never;
  url: "/api/v1/comics/statuses";
};

export type ComicControllerCreateStatusErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerCreateStatusError =
  ComicControllerCreateStatusErrors[keyof ComicControllerCreateStatusErrors];

export type ComicControllerCreateStatusResponses = {
  /**
   * OK
   */
  200: MetadataDto;
};

export type ComicControllerCreateStatusResponse =
  ComicControllerCreateStatusResponses[keyof ComicControllerCreateStatusResponses];

export type ComicControllerDeleteStatusData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/statuses/{id}";
};

export type ComicControllerDeleteStatusErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerDeleteStatusError =
  ComicControllerDeleteStatusErrors[keyof ComicControllerDeleteStatusErrors];

export type ComicControllerDeleteStatusResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ComicControllerUpdateStatusData = {
  body: UpdateMetadataDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/statuses/{id}";
};

export type ComicControllerUpdateStatusErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ComicControllerUpdateStatusError =
  ComicControllerUpdateStatusErrors[keyof ComicControllerUpdateStatusErrors];

export type ComicControllerUpdateStatusResponses = {
  /**
   * OK
   */
  200: MetadataDto;
};

export type ComicControllerUpdateStatusResponse =
  ComicControllerUpdateStatusResponses[keyof ComicControllerUpdateStatusResponses];

export type ChapterControllerFindAllChaptersData = {
  body?: never;
  path?: never;
  query: {
    limit?: number;
    page?: number;
    q?: string;
    order?: "asc" | "desc";
    comicId: string;
  };
  url: "/api/v1/comics/chapters";
};

export type ChapterControllerFindAllChaptersErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ChapterControllerFindAllChaptersError =
  ChapterControllerFindAllChaptersErrors[keyof ChapterControllerFindAllChaptersErrors];

export type ChapterControllerFindAllChaptersResponses = {
  /**
   * OK
   */
  200: OffsetPaginatedDto & {
    data?: Array<ChapterDto>;
  };
};

export type ChapterControllerFindAllChaptersResponse =
  ChapterControllerFindAllChaptersResponses[keyof ChapterControllerFindAllChaptersResponses];

export type ChapterControllerCreateChapterData = {
  body: CreateChapterDto;
  path?: never;
  query?: never;
  url: "/api/v1/comics/chapters";
};

export type ChapterControllerCreateChapterErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ChapterControllerCreateChapterError =
  ChapterControllerCreateChapterErrors[keyof ChapterControllerCreateChapterErrors];

export type ChapterControllerCreateChapterResponses = {
  /**
   * OK
   */
  200: ChapterDto;
};

export type ChapterControllerCreateChapterResponse =
  ChapterControllerCreateChapterResponses[keyof ChapterControllerCreateChapterResponses];

export type ChapterControllerFindChapterBySlugData = {
  body?: never;
  path: {
    slug: string;
  };
  query?: never;
  url: "/api/v1/comics/chapters/{slug}";
};

export type ChapterControllerFindChapterBySlugErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ChapterControllerFindChapterBySlugError =
  ChapterControllerFindChapterBySlugErrors[keyof ChapterControllerFindChapterBySlugErrors];

export type ChapterControllerFindChapterBySlugResponses = {
  /**
   * OK
   */
  200: ChapterDto;
};

export type ChapterControllerFindChapterBySlugResponse =
  ChapterControllerFindChapterBySlugResponses[keyof ChapterControllerFindChapterBySlugResponses];

export type ChapterControllerDeleteChapterData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/chapters/{id}";
};

export type ChapterControllerDeleteChapterErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ChapterControllerDeleteChapterError =
  ChapterControllerDeleteChapterErrors[keyof ChapterControllerDeleteChapterErrors];

export type ChapterControllerDeleteChapterResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type ChapterControllerUpdateChapterData = {
  body: UpdateChapterDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/comics/chapters/{id}";
};

export type ChapterControllerUpdateChapterErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type ChapterControllerUpdateChapterError =
  ChapterControllerUpdateChapterErrors[keyof ChapterControllerUpdateChapterErrors];

export type ChapterControllerUpdateChapterResponses = {
  /**
   * OK
   */
  200: ChapterDto;
};

export type ChapterControllerUpdateChapterResponse =
  ChapterControllerUpdateChapterResponses[keyof ChapterControllerUpdateChapterResponses];

export type UserTitleStateControllerFindAllUserTitleStatesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/user-title-states";
};

export type UserTitleStateControllerFindAllUserTitleStatesErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserTitleStateControllerFindAllUserTitleStatesError =
  UserTitleStateControllerFindAllUserTitleStatesErrors[keyof UserTitleStateControllerFindAllUserTitleStatesErrors];

export type UserTitleStateControllerFindAllUserTitleStatesResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UserTitleStateControllerCreateUserTitleStateData = {
  body: CreateUserTitleStateDto;
  path?: never;
  query?: never;
  url: "/api/v1/user-title-states";
};

export type UserTitleStateControllerCreateUserTitleStateErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserTitleStateControllerCreateUserTitleStateError =
  UserTitleStateControllerCreateUserTitleStateErrors[keyof UserTitleStateControllerCreateUserTitleStateErrors];

export type UserTitleStateControllerCreateUserTitleStateResponses = {
  /**
   * OK
   */
  200: UserTitleStateDto;
};

export type UserTitleStateControllerCreateUserTitleStateResponse =
  UserTitleStateControllerCreateUserTitleStateResponses[keyof UserTitleStateControllerCreateUserTitleStateResponses];

export type UserTitleStateControllerGetUserBookmarksData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/v1/user-title-states/bookmarks";
};

export type UserTitleStateControllerGetUserBookmarksErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserTitleStateControllerGetUserBookmarksError =
  UserTitleStateControllerGetUserBookmarksErrors[keyof UserTitleStateControllerGetUserBookmarksErrors];

export type UserTitleStateControllerGetUserBookmarksResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UserTitleStateControllerDeleteUserTitleStateData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/user-title-states/{id}";
};

export type UserTitleStateControllerDeleteUserTitleStateErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserTitleStateControllerDeleteUserTitleStateError =
  UserTitleStateControllerDeleteUserTitleStateErrors[keyof UserTitleStateControllerDeleteUserTitleStateErrors];

export type UserTitleStateControllerDeleteUserTitleStateResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type UserTitleStateControllerFindUserTitleStateData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/user-title-states/{id}";
};

export type UserTitleStateControllerFindUserTitleStateErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserTitleStateControllerFindUserTitleStateError =
  UserTitleStateControllerFindUserTitleStateErrors[keyof UserTitleStateControllerFindUserTitleStateErrors];

export type UserTitleStateControllerFindUserTitleStateResponses = {
  /**
   * OK
   */
  200: UserTitleStateDto;
};

export type UserTitleStateControllerFindUserTitleStateResponse =
  UserTitleStateControllerFindUserTitleStateResponses[keyof UserTitleStateControllerFindUserTitleStateResponses];

export type UserTitleStateControllerUpdateUserTitleStateData = {
  body: UpdateUserTitleStateDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/v1/user-title-states/{id}";
};

export type UserTitleStateControllerUpdateUserTitleStateErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserTitleStateControllerUpdateUserTitleStateError =
  UserTitleStateControllerUpdateUserTitleStateErrors[keyof UserTitleStateControllerUpdateUserTitleStateErrors];

export type UserTitleStateControllerUpdateUserTitleStateResponses = {
  /**
   * OK
   */
  200: UserTitleStateDto;
};

export type UserTitleStateControllerUpdateUserTitleStateResponse =
  UserTitleStateControllerUpdateUserTitleStateResponses[keyof UserTitleStateControllerUpdateUserTitleStateResponses];

export type UserTitleStateControllerGetUserTitleStateData = {
  body?: never;
  path: {
    comicId: string;
  };
  query?: never;
  url: "/api/v1/user-title-states/comic/{comicId}";
};

export type UserTitleStateControllerGetUserTitleStateErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserTitleStateControllerGetUserTitleStateError =
  UserTitleStateControllerGetUserTitleStateErrors[keyof UserTitleStateControllerGetUserTitleStateErrors];

export type UserTitleStateControllerGetUserTitleStateResponses = {
  /**
   * OK
   */
  200: UserTitleStateDto;
};

export type UserTitleStateControllerGetUserTitleStateResponse =
  UserTitleStateControllerGetUserTitleStateResponses[keyof UserTitleStateControllerGetUserTitleStateResponses];

export type UserTitleStateControllerUpdateReadingProgressData = {
  body?: never;
  path: {
    cursor: number;
    comicId: string;
  };
  query?: never;
  url: "/api/v1/user-title-states/reading-progress/{comicId}/{cursor}";
};

export type UserTitleStateControllerUpdateReadingProgressErrors = {
  /**
   * Bad Request
   */
  400: ErrorDto;
  /**
   * Unauthorized
   */
  401: ErrorDto;
  /**
   * Forbidden
   */
  403: ErrorDto;
  /**
   * Not Found
   */
  404: ErrorDto;
  /**
   * Unprocessable Entity
   */
  422: ErrorDto;
  /**
   * Internal Server Error
   */
  500: ErrorDto;
};

export type UserTitleStateControllerUpdateReadingProgressError =
  UserTitleStateControllerUpdateReadingProgressErrors[keyof UserTitleStateControllerUpdateReadingProgressErrors];

export type UserTitleStateControllerUpdateReadingProgressResponses = {
  /**
   * OK
   */
  200: UserTitleStateDto;
};

export type UserTitleStateControllerUpdateReadingProgressResponse =
  UserTitleStateControllerUpdateReadingProgressResponses[keyof UserTitleStateControllerUpdateReadingProgressResponses];

export type ClientOptions = {
  baseUrl: "http://localhost:8000" | (string & {});
};
